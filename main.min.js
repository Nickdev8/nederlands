(() => {
    function g(e) {
        return "string" != typeof e ? [] : e.split(",").map(e => e.trim()).filter(e => 0 < e.length);
    }
    function y(e, t) {
        e = e.split(/\s+/);
        let o = t.split(/\s+/);
        t = e.filter(e => o.includes(e)).length, e = Math.min(e.length, o.length);
        return 0 < e && .6 <= t / e;
    }
    var e = (e => {
        (e = new DOMParser().parseFromString(e, "text/html")).querySelectorAll("audio, video, script, style").forEach(e => e.remove()), 
        e = e.querySelectorAll("h1, h2, h3, h4, h5, h6, p, li");
        let o = [];
        return e.forEach(e => {
            let t = e.textContent.trim();
            !t || /^\d{1,2}:\d{2}/.test(t) || /^(audio|video)$/i.test(t) || /Deze student heeft al feedback/i.test(t) || (t = t.replace(/\s+/g, " "), 
            o[o.length - 1] !== t && o.push(t));
        }), o.join("\n\n");
    })((e = document.querySelector(".ng-star-inserted")) ? e.outerHTML : "");
    console.log(e);
    (async e => {
        e = JSON.stringify({
            messages: [ {
                role: "user",
                content: e
            } ]
        });
        try {
            var t = await fetch("https://ai.hackclub.com/chat/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: e
            });
            if (!t.ok) throw new Error("HTTP error! Status: " + t.status);
            var o = await t.json();
            if (console.log("Full response:", o), o.choices && o.choices.length) {
                var n = o.choices[0].message.content;
                console.log("Raw JSON response:", n);
                let p;
                try {
                    p = JSON.parse(n), console.log("Parsed answers object:", p);
                } catch (e) {
                    return !console.error("Error parsing JSON — aborting:", e, n);
                }
                var r = document.querySelectorAll("vo-eb-document");
                console.log("Found sections:", r.length);
                let d = r.length <= 2;
                r.forEach((r, t) => {
                    try {
                        console.log(`
--- Processing section ${t + 1} ---`);
                        let e = "a";
                        if (!d) {
                            var o = r.querySelector("p.instruction > span");
                            if (!o) return void console.warn(`Section ${t + 1}: no key span found, skipping.`);
                            e = o.textContent.trim();
                        }
                        console.log(`Using key "${e}"`);
                        var s = p[e];
                        if (void 0 === s) console.warn(`No answer for key "${e}", skipping section.`); else {
                            var n = r.querySelector("p.instruction > span"), i = (n ? n.textContent = s : console.warn(`Section ${t + 1}: missing <span> to set textContent; continuing.`), 
                            r.querySelector("span > eb-editing > div > textarea"));
                            if (i) console.log("→ [open-ended] injecting into textarea"), 
                            i.value = Array.isArray(s) ? s.join(", ") : String(s); else {
                                var l = r.querySelector("p.instruction span.eb-instruction-number"), a = r.querySelectorAll("eb-cloze-id"), c = !!r.querySelector("eb-cloze-drop");
                                if (l && a.length && !c) {
                                    console.log("→ [multi-line select] for section " + (t + 1)), 
                                    console.log("  Instruction list:", l.textContent.trim());
                                    let r = Array.isArray(s) ? s : g(String(s));
                                    console.log("  Answer parts:", r), a.forEach((e, t) => {
                                        var o = e.querySelector("span.eb-value");
                                        let n = o ? o.textContent.trim() : "";
                                        console.log(`    [${t}] option:`, n);
                                        o = r.some(e => e === n || y(e.toLowerCase(), n.toLowerCase())), 
                                        console.log("      → match?", o), t = e.querySelector("span.eb-choice");
                                        t && t.classList.toggle("eb-selected", o), 
                                        e.classList.toggle("ng-valid", o), e.classList.toggle("ng-invalid", !o);
                                    }), void console.log("  Done multi-line select for section", t + 1);
                                } else {
                                    var u = r.querySelectorAll("eb-cloze-content-block > eb-cloze-container > p > eb-cloze-renderer");
                                    if (u.length) {
                                        console.log(`→ [cloze] setting ${u.length} dropdown(s)`);
                                        let o = Array.isArray(s) ? s : g(String(s)), n = 0;
                                        void u.forEach((e, t) => {
                                            e = e.querySelector("eb-cloze-drop > eb-select > span > span.eb-value > span");
                                            e ? e.innerHTML = o[t - n] || "" : n++;
                                        });
                                    } else if (r.querySelector("eb-choice-list ul li.eb-choice input[type='checkbox']")) {
                                        console.log(`→ [checkbox] trying multiple answers for "${e}"`);
                                        var h = r.querySelector("eb-choice-list ul");
                                        let o = Array.isArray(s) ? s : g(String(s)), n = !1;
                                        h.querySelectorAll("li.eb-choice").forEach(e => {
                                            let t = e.textContent.trim().toLowerCase();
                                            o.some(e => {
                                                e = e.toLowerCase();
                                                return e === t || y(e, t);
                                            }) && ((e = e.querySelector("input[type='checkbox']")).checked = !0, 
                                            e.dispatchEvent(new Event("change", {
                                                bubbles: !0
                                            })), n = !0);
                                        }), void (n || h.insertAdjacentHTML("beforeend", `<li class="eb-choice eb-custom">${o.join(", ")}</li>`));
                                    } else if (r.querySelector("eb-choice-list ul li.eb-choice input[type='radio']")) {
                                        console.log(`→ [radio] single-choice for "${e}"`);
                                        let t = String(s).trim().toLowerCase();
                                        void r.querySelectorAll("eb-choice-list ul li.eb-choice").forEach(e => {
                                            e.textContent.trim().toLowerCase() === t && ((e = e.querySelector("input[type='radio']")).checked = !0, 
                                            e.dispatchEvent(new Event("change", {
                                                bubbles: !0
                                            })));
                                        });
                                    } else console.log(`No matching input found for key "${e}".`);
                                }
                            }
                        }
                    } catch (e) {
                        console.error(`Error processing section ${t + 1}, skipping to next:`, e);
                    }
                });
            } else console.log("No valid response received.");
        } catch (e) {
            console.error("Error during API request:", e);
        }
    })('I will now send you the HTML content extracted from the div with the class \'ng-star-inserted\' from the \'taalblokken\' website. Taalblokken is a learning website for students. Your task is to analyze the HTML and extract the answers to the questions it contains. \n\nFor each question:\n - If the question is open-ended or single-choice, provide the answer as a simple text string.\n - For open-ended (textarea) questions, write a detailed, complete answer in one or two full sentences that directly addresses everything the question asks for.\n - Some answers may contain multiple parts; in those cases, output them as an array of strings.\n\n**IMPORTANT:** If there is **only one** question on the page, output exactly one property **"a"** and do **not** invent or include any other keys.\n - Whenever the answer you receive is a single comma-separated string (e.g. "foo, bar, baz") or a repeated phrase with commas, split on commas, strip any leading context, and keep only the actual tokens in order.\n   • Example: "kop: ja, opmaak: ja, info: ja" → ["ja","ja","ja"].\n\nAdditional rules:\n - For question \'a\' (Beoordeel tekst 2 op betrouwbaarheid), output exactly four elements: [bron betrouwbaar?, auteur expertise?, up-to-date?, feiten?].\n - Only use the provided text; do not invent information.\n - For multiple-choice, choose one of the given options.\n - Output keys in alphabetical order (a, b, c…) without skipping or duplicating.\n\n**NO extra formatting:** output only the raw JSON object, with no markdown or backticks.' + e);
})();