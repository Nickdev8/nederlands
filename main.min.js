(() => {
    function a(e) {
        return "string" != typeof e ? [] : e.split(",").map(e => e.trim()).filter(e => 0 < e.length);
    }
    var e = (e => {
        (e = new DOMParser().parseFromString(e, "text/html")).querySelectorAll("audio, video, script, style").forEach(e => e.remove()), 
        e = e.querySelectorAll("h1, h2, h3, h4, h5, h6, p, li");
        let t = [];
        return e.forEach(e => {
            let o = e.textContent.trim();
            !o || /^\d{1,2}:\d{2}/.test(o) || /^(audio|video)$/i.test(o) || /Deze student heeft al feedback/i.test(o) || (o = o.replace(/\s+/g, " "), 
            t[t.length - 1] !== o && t.push(o));
        }), t.join("\n\n");
    })((e = document.querySelector(".ng-star-inserted")) ? e.outerHTML : "");
    console.log(e);
    (async e => {
        e = JSON.stringify({
            messages: [ {
                role: "user",
                content: e
            } ]
        });
        try {
            var o = await fetch("https://ai.hackclub.com/chat/completions", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: e
            });
            if (!o.ok) throw new Error("HTTP error! Status: " + o.status);
            var t = await o.json();
            if (console.log("Full response:", t), t.choices && t.choices.length) {
                var n = t.choices[0].message.content;
                console.log("Raw JSON response:", n);
                let r;
                try {
                    r = JSON.parse(n), console.log("Parsed answers object:", r);
                } catch (e) {
                    return !console.error("Error parsing JSON:", e, n);
                }
                var l = document.querySelectorAll("vo-eb-document");
                console.log("Found sections:", l.length);
                let s = l.length <= 2;
                l.forEach((e, o) => {
                    console.log(`
--- Processing section ${o + 1} ---`);
                    let t = "a";
                    if (!s) {
                        var l = e.querySelector("p.instruction > span");
                        if (!l) return void console.log(`Section ${o + 1}: no key found, skipping.`);
                        t = l.textContent.trim();
                    }
                    console.log(`Using key "${t}"`);
                    o = r[t], console.log(`Raw answer for "${t}":`, o), l = Array.isArray(o) ? "array" : typeof o, 
                    console.log(`Answer type for "${t}":`, l), e.querySelector("p.instruction > span").textContent = o + " " + t, 
                    l = e.querySelector("span > eb-editing > div > textarea");
                    if (l) console.log("→ [open-ended] injecting into textarea"), 
                    Array.isArray(o) ? (l.value = o.join(", "), console.log(`Injected array into textarea: "${l.value}"`)) : (l.value = String(o), 
                    console.log(`Injected text into textarea: "${l.value}"`)); else {
                        l = e.querySelectorAll("eb-cloze-content-block > eb-cloze-container > p > eb-cloze-renderer");
                        if (l.length) {
                            console.log(`→ [cloze] setting ${l.length} dropdown(s)`);
                            let n = Array.isArray(o) ? o : a(String(o)), r = (console.log("Cloze parts array:", n), 
                            0);
                            void l.forEach((e, o) => {
                                var t, e = e.querySelector("eb-cloze-drop > eb-select > span > span.eb-value > span");
                                e ? (t = n[o - r] || "", e.innerHTML = t, console.log(` Set dropdown[${o}] = "${t}"`)) : r++;
                            });
                        } else if (e.querySelector("eb-choice-list ul li.eb-choice input[type='checkbox']")) {
                            console.log(`→ [checkbox] trying multiple answers for "${t}"`);
                            var n, l = e.querySelector("eb-choice-list ul");
                            let r = Array.isArray(o) ? o : a(String(o)), s = (console.log("Answers array:", r), 
                            !1);
                            l.querySelectorAll("li.eb-choice").forEach((e, o) => {
                                let t = e.textContent.trim().toLowerCase();
                                var n = r.some(e => {
                                    e = e.toLowerCase();
                                    return e === t || ((e, o) => {
                                        e = e.split(/\s+/);
                                        let t = o.split(/\s+/);
                                        return o = e.filter(e => t.includes(e)).length, 
                                        0 < (e = Math.min(e.length, t.length)) && .6 <= o / e;
                                    })(e, t);
                                });
                                console.log(` Option[${o}] "${t}" match?`, n), n && (o = e.querySelector("input[type='checkbox']")) && (o.checked = !0, 
                                o.dispatchEvent(new Event("change", {
                                    bubbles: !0
                                })), console.log(`  ✓ Checked "${t}"`), s = !0);
                            }), void (s || (n = r.join(", "), l.insertAdjacentHTML("beforeend", `<li class="eb-choice eb-custom">${n}</li>`), 
                            console.warn(`⚠️ No matches – appended raw answer: "${n}"`)));
                        } else if (e.querySelector("eb-choice-list ul li.eb-choice input[type='radio']")) {
                            console.log(`→ [radio] single-choice for "${t}"`);
                            let n = String(o).trim().toLowerCase();
                            console.log(` Desired radio value: "${n}"`), void e.querySelectorAll("eb-choice-list ul li.eb-choice").forEach((e, o) => {
                                var t = e.textContent.trim().toLowerCase();
                                console.log(` Option[${o}] "${t}"`), t === n && (o = e.querySelector("input[type='radio']")) && (o.checked = !0, 
                                o.dispatchEvent(new Event("change", {
                                    bubbles: !0
                                })), console.log(`  ✓ Selected "${t}"`));
                            });
                        } else console.log(`No matching input found for key "${t}".`);
                    }
                });
            } else console.log("No valid response received.");
        } catch (e) {
            console.error("Error during API request:", e);
        }
    })('I will now send you the HTML content extracted from the div with the class \'ng-star-inserted\' from the \'taalblokken\' website. Taalblokken is a learning website for students. Your task is to analyze the HTML and extract the answers to the questions it contains. \n\nFor each question:\n - If the question is open-ended or single-choice, provide the answer as a simple text string.\n - For open-ended (textarea) questions, write a detailed, complete answer in one or two full sentences that directly addresses everything the question asks for.\n - Some answers may contain multiple parts; in those cases, output them as an array of strings.\n\n**IMPORTANT EXTRA RULE:**\n - Whenever the answer you receive is a single comma-separated string (e.g. "foo, bar, baz") or a repeated phrase with commas, split on commas, strip any leading context, and keep only the actual tokens in order.\n   • Example: "kop: ja, opmaak: ja, info: ja" → ["ja","ja","ja"].\n\nAdditional rules:\n - For question \'a\' (Beoordeel tekst 2 op betrouwbaarheid), output exactly four elements: [bron betrouwbaar?, auteur expertise?, up-to-date?, feiten?].\n - Only use the provided text; do not invent information.\n - For multiple-choice, choose one of the given options.\n - Output keys in alphabetical order (a, b, c…) without skipping or duplicating.\n\n**NO extra formatting:** output only the raw JSON object, with no markdown or backticks.' + e);
})();